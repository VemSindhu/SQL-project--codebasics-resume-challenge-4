Requests
1.Provide the list of markets in which customer  "Atliq  Exclusive"  operates its 
business in the  APAC  region. 

SELECT DISTINCT market, region, customer
FROM dim_customer
WHERE customer = "Atliq Exclusive"
AND region = "APAC";

2.What is the percentage of unique product increase in 2021 vs. 2020? The final output contains these fields,
unique_products_2020,unique_products_2021,percentage_chg

WITH unique_products_2020 AS (
    SELECT COUNT(DISTINCT product_code) AS unique_products_2020
    FROM fact_sales_monthly
    WHERE fiscal_year = 2020
),
unique_products_2021 AS (
    SELECT COUNT(DISTINCT product_code) AS unique_products_2021
    FROM fact_sales_monthly
    WHERE fiscal_year = 2021
)
SELECT
    up2020.unique_products_2020,
    up2021.unique_products_2021,
    ((up2021.unique_products_2021 - up2020.unique_products_2020) * 100.0 / up2020.unique_products_2020) AS percentage_chg
FROM unique_products_2020 up2020, unique_products_2021 up2021;

3.  Provide a report with all the unique product counts for each  segment  and 
sort them in descending order of product counts. The final output contains 
2 fields, 
segment ,product_count

select count(DISTINCT product_code) as product_count,segment
 from dim_product
 group by segment
order by product_count DESC;

4.  Follow-up: Which segment had the most increase in unique products in 
2021 vs 2020? The final output contains these fields, 
segment,product_count_2020, product_count_2021, difference

with product_count_2020 as (
    select d.segment as segment, count(DISTINCT f.product_code) as product_code_20
    from dim_product d
    join fact_gross_price f on d.product_code = f.product_code
    where f.fiscal_year = 2020
    group by d.segment
),
product_count_2021 as (
    select d.segment as segment, count(DISTINCT f.product_code) as product_code_21
    from dim_product d
    join fact_gross_price f on d.product_code = f.product_code
    where f.fiscal_year = 2021
    group by d.segment
)
select 
    p2021.segment,
    (p2020.product_code_20) as product_count_2020,
    (p2021.product_code_21) as product_count_2021,
    (p2021.product_code_21) - (p2020.product_code_20) as difference
from 
    product_count_2021 p2021
left join 
    product_count_2020 p2020 on p2021.segment = p2020.segment
order by 
    difference desc;

5.  Get the products that have the highest and lowest manufacturing costs. 
The final output should contain these fields, 
product_code,product,manufacturing_cost 

select d.product_code,d.product,
f.manufacturing_cost
from fact_manufacturing_cost f
join dim_product d
on f.product_code = d.product_code
where manufacturing_cost = (
select max(manufacturing_cost) from fact_manufacturing_cost
)
or
manufacturing_cost = (
select min(manufacturing_cost) from fact_manufacturing_cost
)
order by manufacturing_cost desc;

6. Generate a report which contains the top 5 customers who received an 
average high  pre_invoice_discount_pct  for the  fiscal  year 2021  and in the 
Indian  market. The final output contains these fields, 
customer_code,customer,average_discount_percentage

select d.customer_code,d.customer,
round(avg(f.pre_invoice_discount_pct),4)
 as average_discount_percentage
,f.fiscal_year
from dim_customer d
join fact_pre_invoice_deductions f
on d.customer_code = f.customer_code
where d.market = "india" and fiscal_year = 2021
group by d.customer_code
order by average_discount_percentage desc
limit 5;

7.  Get the complete report of the Gross sales amount for the customer  “Atliq 
Exclusive”  for each month  .  This analysis helps to  get an idea of low and 
high-performing months and take strategic decisions. 
The final report contains these columns: 
Month,Year,Gross sales Amount

select c.customer,monthname(f.date) as month,year(f.date) as year,
round(sum((g.gross_price)*(f.sold_quantity)/1000000),2)
 as gross_sales_amount_in_mln
from dim_customer c
join fact_sales_monthly f
on c.customer_code = f.customer_code
join fact_gross_price g
on f.product_code = g.product_code
where c.customer = "Atliq Exclusive" 
group by year(f.date),month(f.date)
order by year,month;

 8. In which quarter of 2020, got the maximum total_sold_quantity? The final 
output contains these fields sorted by the total_sold_quantity, Quarter,total_sold_quantity

SELECT 
    CASE 
        WHEN MONTH(date) IN (9, 10, 11) THEN 'Q1'
        WHEN MONTH(date) IN (12, 1, 2) THEN 'Q2'
        WHEN MONTH(date) IN (3,4,5) THEN 'Q3'
        ELSE 'Q4'
    END AS Quarter,
    ROUND(SUM(sold_quantity) / 1000000, 2)
    AS Total_Sold_Quantity_in_mln
FROM 
    fact_sales_monthly
WHERE 
    fiscal_year = 2020
GROUP BY 
    Quarter
ORDER BY 
    Total_Sold_Quantity_in_mln DESC;

9.  Which channel helped to bring more gross sales in the fiscal year 2021 
and the percentage of contribution?  The final output  contains these fields, 
channel,gross_sales_mln,percentage

with sales_channel as(
select c.channel as channel,
round(sum((g.gross_price)*(f.sold_quantity)/1000000),2)
 as gross_sales_mln
from fact_sales_monthly f
left join fact_gross_price g
on f.product_code = g.product_code
and f.fiscal_year = g.fiscal_year
 left join dim_customer c
on c.customer_code = f.customer_code
where f.fiscal_year = 2021
group by c.channel
)
SELECT 
    channel,
    gross_sales_mln,
    ROUND(((gross_sales_mln) / sum(gross_sales_mln) over()) * 100, 2)
    AS percentage
from sales_channel 
group by channel
ORDER BY 
    percentage DESC;

10.  Get the Top 3 products in each division that have a high 
total_sold_quantity in the fiscal_year 2021? The final output contains these 
fields, division,product_code, product,total_sold_quantity,rank_order

select d.product,d.product_code,d.division,
sum(f.sold_quantity) as total_sold_quantity
from dim_product d
join fact_sales_monthly f
on d.product_code = f.product_code
where f.fiscal_year = 2021
group by d.product,d.product_code,d.division
),
ranked as(
select s.product,s.product_code,
s.division,s.total_sold_quantity,
rank() over(partition by division order by  total_sold_quantity desc)
as rank_order
from sales s
)
select r.division,r.product,r.product_code,
r.total_sold_quantity,r.rank_order 
from ranked r
where r.rank_order<=3
order by r.division,r.rank_order;





